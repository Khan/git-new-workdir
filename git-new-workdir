#!/bin/sh

usage () {
	echo "usage:" $@
	exit 127
}

die () {
	echo $@
	exit 128
}

failed () {
	die "unable to create new workdir '$new_workdir'!"
}

if test $# -lt 2 || test $# -gt 3
then
	usage "$0 <repository> <new_workdir> [<branch>]"
fi

orig_git=$1
new_workdir=$2
branch=$3

# want to make sure that what is pointed to has a .git directory ...
git_dir=$(cd "$orig_git" 2>/dev/null &&
  git rev-parse --git-dir 2>/dev/null) ||
  die "Not a git repository: \"$orig_git\""

case "$git_dir" in
.git)
	git_dir="$orig_git/.git"
	;;
.)
	git_dir=$orig_git
	;;
esac

# don't link to a configured bare repository
isbare=$(git --git-dir="$git_dir" config --bool --get core.bare)
if test ztrue = "z$isbare"
then
	die "\"$git_dir\" has core.bare set to true," \
		" remove from \"$git_dir/config\" to use $0"
fi

# don't link to a workdir
if test -h "$git_dir/config"
then
	die "\"$orig_git\" is a working directory only, please specify" \
		"a complete repository."
fi

# don't modify an existing directory, unless it's empty
if test -d "$new_workdir" && test $(ls -a1 "$new_workdir/." | wc -l) -ne 2
then
	die "destination directory '$new_workdir' is not empty."
fi

# make sure the links in the workdir have full paths to the original repo
git_dir=$(cd "$git_dir" && pwd) || exit 1

new_git_dir="$new_workdir/.git"

# if $orig_git is a .git file with a 'gitdir' entry (as is the case for
# submodules), have the new git dir follow that same pattern.  otherwise
# the 'worktree' entry in .git/config, which is a relative path, will
# not resolve properly because we're not in the expected subdirectory.
# (NOTE: This is a KA-specific change, and differs from upstream behavior.)
gitdir_dest=$(sed -ne 's/^gitdir: *//p' "$orig_git/.git" 2>/dev/null)
if test -n "$gitdir_dest"; then
	ln -s "$orig_git/.git" "$new_workdir/.git" || failed
	new_git_dir="$new_workdir/$gitdir_dest"
fi

# if new_workdir already exists, leave it alone in case of error
if ! test -d "$new_workdir"
then
	clean_new_workdir=true
fi

mkdir -p "$new_git_dir" || failed

cleandir=$(cd "$cleandir" && pwd) || failed
cleanup () {
	if test z"$clean_new_workdir" = ztrue
	then
		rm -rf "$new_workdir"
	fi
	# this may (or may not) be a noop if new_workdir was already deleted.
	rm -rf "$new_git_dir"
	# this is a noop unless .git is a 'gitdir: ...' file.
	rm -f "$new_workdir/.git"
}
siglist="0 1 2 15"
trap cleanup $siglist

# create the links to the original repo.  our goal is to link just objects,
# and let everything else be per-repo.  But we need to share the config
# as well so every repo sees the same list of submodules.  And hooks too
# I guess.
for x in config objects hooks svn bigfile
do
	ln -s "$git_dir/$x" "$new_git_dir/$x" || failed
done

# for everything else, create a copy of the original repo.  This
# *should* act the same as if you checked out the repo from scratch
# and got it into the same state as the source location.
# (NOTE: This is a KA-specific change, and differs from upstream behavior.)
for x in refs logs info packed-refs remotes rr-cache
do
	if [ -e "$git_dir/$x" ]
	then
		cp -a "$git_dir/$x" "$new_git_dir/" || failed
	fi
done

# copy the HEAD from the original repository as a default branch
cp "$git_dir/HEAD" "$new_git_dir/HEAD" || failed

# the workdir is set up.  if the checkout fails, the user can fix it.
trap - $siglist

# checkout the branch (either the same as HEAD from the original repository,
# or the one that was asked for).  we must be in the new workdir for this.
cd "$new_workdir" || failed
git checkout -f $branch
